config_version=0.17.3
# NAME
# aide.conf - The configuration file for Advanced Intrusion Detection Environment

# SYNOPSIS
# aide.conf is the configuration file for Advanced Intrusion Detection Environment.
# aide.conf contains the runtime configuration aide uses to initialize or check the AIDE database.

# FILE FORMAT
# aide.conf is case-sensitive. Leading and trailing white spaces are ignored. Each config lines must end with new line.
# AIDE uses the backslash character (\) as escape character for ' ' (space), '@' and '\' (backslash) (e.g. '\ ' or '\@').
# To literally match a '\' in a file path with a regular expression you have to escape the backslash twice (i.e. '\\\\').
# There are three types of lines in aide.conf. First there are the configuration options which are used to set
# configuration parameters and define groups. Second, there are (restricted) rules that are used to indicate which files
# are added to the database. Third, macro lines define or undefine variables within the config file. Lines beginning
# with # are ignored as comments.

# set environment for executable config files included by x_include
@@x_include_setenv UPAC_settingsd /etc/aide/aide.settings.d

# The daily cron job depends on these paths
# database_in = The url/path from which database is read. There can only be one of these lines. If there are multiple
# database lines then the first is used. # example database_in=stdin, database_in=https://example.com/aide.db
database_in=file:/var/lib/aide/aide.db
# The url/path to which the new database is written to
database_out=file:/var/lib/aide/aide.db.new
# The url/path to which the other database for --compare is read
database_new=file:/var/lib/aide/aide.db.new
# Whether to set the database output as gzipped or not. This option is available only if zlib support is compiled in.
gzip_dbout=yes

# Set to no to disable report_summarize_changes option. Summarize changes in the added, removed and changed files
# sections of the report.
report_summarize_changes=yes
# Set to no to disable grouping of files in report. Group the files in the report by added, removed and changed files.
report_grouped=yes
# Set verbosity of aide run and reports
# The log level to use. Log messages are written to stderr. If there are multiple log_level lines then the first one is
# used. The --log-level or -L command line option overwrites this option. The following log levels are available:
# error: show unrecoverable issues that have to be handled by the user. Errors are fatal to the AIDE process.
# warning: additionally show recoverable issues that most likely lead to unexpected behaviour and should be handled by the user
# notice: additionally show recoverable issues that sometimes lead to unexpected behaviour and might be handled by the user.
# info: additionally show informational messages
# rule: additionally show messages to help to debug the path rule matching
# config: additionally show messages to help to debug config and rule parsing
# debug: additionally show messages that are useful to debug the application (very verbose)
# thread: additionally show messages about thread processing (e.g. broadcast events)
# trace: detailed information about the flow of the application (e.g. in-loop logging) (even more verbose)

log_level=warning
# The report level to use. The available report levels are as follows:
# minimal: print single line whether AIDE found differences to the database
# summary: additionally print number of added, removed and changed files
# database_attributes: additionally print database checksums
# list_entries: additionally print lists of added, removed and changed entries
# changed_attributes: additionally print details about changed entries
# added_removed_attributes: additionally print details about added and removed attributes
# added_removed_entries: additionally print details about added and removed entries
report_level=changed_attributes

# Set to yes to print the checksums in the report in hex format
report_base16 = no

# if you want to sacrifice security for speed, remove some of these checksums.
# Checksums = sha256+sha512+rmd160+haval+gost+crc32+tiger+whirlpool
Checksums = sha512

# The checksums of the databases to be printed in the report
# Set to 'E' to disable.
database_attrs = Checksums

# === START RULE DECLARATION ===

# check permissions, owner, group and file type
OwnerMode = p+u+g+ftype

# Check size and block count
Size = s+b

# Files that stay static
InodeData = OwnerMode+n+i+Size+l+X
StaticFile = m+c+Checksums

# Files that stay static but are copied to a ram disk on startup
# (causing different inode)
RamdiskData = InodeData-i

# Check everything
Full = InodeData+StaticFile

# Files that change their mtimes or ctimes but not their contents
VarTime = InodeData+Checksums

# Files that are recreated regularly but do not change their contents
VarInode = VarTime-i

# Files that change their contents during system operation
VarFile = OwnerMode+n+l+X

# Directories that change their contents during system operation
VarDir = OwnerMode+n+i+X

# Directories that are recreated regularly and change their contents
VarDirInode = OwnerMode+n+X

# Directories that change their mtimes or ctimes but not their contents
VarDirTime = InodeData

# This is a custom rule by MaXi32
MaxiRule = sha512+ftype
MaxiRuleEx = sha256+ftype+p+u+g+acl+xattrs
MaxiRuleExL = sha512+ftype+p+u+g+n+acl+xattrs
MaxiRuleFull = Checksums+ftype+p+u+g+n+acl+xattrs
# Logs are special: they are continously written to, may be compressed
# have their file name changed in different, mutually incompatibly ways
# and apprear and vanish at will. Handling this is a a complex and error-
# prone issue.
#
# This is best broken down in a number of small tasks:
#
#
# (A)
# While a live log is being written to, it doesn't change its mode and
# inode and its size only increases.
#
# (B)
# When a live log is rotated for the first time, it should not change
# its mode, may change its inode, and its size decreases. The size
# decrease may not be noticed by aide if the file had size x at the last
# aide run, was rotated in the mean time and was written to so that it
# had a size > x at the next aide run.
#
# (C)
# When a log is compressed, this looks to aide like the uncompressed
# file vanished (or was replaced by another file) and the compressed
# file appeared out of the blue. There is (currently) no way to
# associate the (gone) uncompressed file's contents with the (new)
# compressed file's contents
#
# (D)
# The actual log rotation may rename foo.{x}.bar to foo.{x+1}.bar without
# changing the other properties of the file
#
# (E)
# If only a given number of log generations is to be kept, foo.{y}.bar may
# vanish, but usually only when no foo.{z}.bar exists for z>y.
#
# (F)
# The set of files foo.{x}.bar to foo.{y}.bar is called a "log series"
# in aide terms, with the lowest x being called the "LoSerMember" element
# and the highest y being called the "HiSerMember" element, and the z
# with x<z<y simple called "SerMember". The Lo and Hi members need to
# be special cased in aide configuration.
#
#
# This is an example of the normal life of a log named foo in a logrotate
# configuration using a configuration at it is commonly used in Debian
# (from old to new):
#     1 logrotate deletes HiSerMember foo.{y}.gz
#     2 logrotate rotates SerMember foo.{z-1}.gz to foo.{z}.gz for all
#       z with 3<z<=y. This includes rotation of foo.{y-1}.gz to
#       foo.{y}.gz and foo.2.gz to foo.3.gz
#     3 logrotate compresses foo.1 to foo.2.gz, creating LoSerMember foo.2.gz
#     4 logrotate rotates foo to foo.1 (a simple rename)
#     5 logrotate creates new, empty foo
#     6 foo daemon logs to foo - foo grows in size
#
# we need the following rules:
# /var/log/foo$ f Log
# /var/log/foo$ f FreqRotLog
#    this takes care of the growing live log (step 7). The "Log" rule
#    is appropriate for logs that are not rotated daily as rotation
#    might be reported (if the file size has decreased since the last
#    aide run). For daily rotated logs, the "FreqRotLog" may be more
#    appropriate.
# /var/log/foo\.1$ f LowLog
#    this takes care of step 5.
# /var/log/foo\.2\.gz$ f LoSerMemberLog
#    this allows yet unknown new files to appear with a \.2\.gz extension,
#    covering step 3.
# /var/log/foo\.[3..y-1]\.gz$ f SerMemberLog
#    this watches the log files as they wander through the Series,
#    changing only their file name but not their contents or metadata,
#    covering step 2.
#    Please note that [3..y-1] needs to be a manually crafted regexp covering
#    all numbers between 3 and y-1.
# /var/log/foo\.y\.gz$ f HiSerMemberLog
#    finally, the last element of the Series is allowed to vanish without
#    being reported, covering step 1.
#
# Please note that these example rules need to be adapted to the logrotate
# configuration for the log. Compression may be disabled or lead to a different
# extension, the dateext option may be used, old logs might be held in a
# different place, a log series does not necessarily need to be compressed etc.
#
# Please note that savelog rotates the live log to .0 and not to .1 as it
# is logrotates (changeable) default.

# Logs grow in size. Log rotation of these logs will be reported, so
# this should only be used for logs that are not rotated daily.
Log = OwnerMode+n+S+X

# Logs that are frequently rotated
FreqRotLog = Log-S

# The first instance of a rotated log: After the log has stopped being
# written to, but before rotation
LowLog = Log-S

# Rotated logs change their file name but retain all their other properties
SerMemberLog  = Full+I

# The first instance of a compressed, rotated log: After a LowLog was
# compressed.
LoSerMemberLog = SerMemberLog+ANF

# The last instance of a compressed, rotated log: After this name, a log
# will be removed
HiSerMemberLog = SerMemberLog+ARF

# Not-yet-compressed log created by logrotate's dateext option:
# These files appear one rotation (renamed from the live log) and are gone
# the next rotation (being compressed)
LowDELog = SerMemberLog+ANF+ARF

# Compressed log created by logrotate's dateext option: These files appear
# once and are not touched any more.
SerMemberDELog = Full+ANF

# For daemons that log to a variable file name and have the live log
# hardlinked to a static file name
LinkedLog = Log-n

# Uncomment this if I want to use aide predefined rules
@@x_include /etc/aide/aide.conf.d ^[a-zA-Z0-9_-]+$

# === END RULE DECLARATION ===